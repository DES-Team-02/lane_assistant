/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.2.14.v202310241605.
* Used org.franca.core 0.13.1.201807231814.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V0_COMMONAPI_Lane_Assistance_STUB_HPP_
#define V0_COMMONAPI_Lane_Assistance_STUB_HPP_

#include <functional>
#include <sstream>




#include <v0/commonapi/LaneAssistance.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif


#include <mutex>

#include <CommonAPI/Stub.hpp>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v0 {
namespace commonapi {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service LaneAssistance. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class LaneAssistanceStubAdapter
    : public virtual CommonAPI::StubAdapter,
      public virtual LaneAssistance {
 public:
    ///Notifies all remote listeners about a change of value of the attribute steering.
    virtual void fireSteeringAttributeChanged(const std::string &steering) = 0;
    ///Notifies all remote listeners about a change of value of the attribute throttle.
    virtual void fireThrottleAttributeChanged(const std::string &throttle) = 0;


    virtual void deactivateManagedInstances() = 0;

    void lockSteeringAttribute(bool _lockAccess) {
        if (_lockAccess) {
            steeringMutex_.lock();
        } else {
            steeringMutex_.unlock();
        }
    }
    void lockThrottleAttribute(bool _lockAccess) {
        if (_lockAccess) {
            throttleMutex_.lock();
        } else {
            throttleMutex_.unlock();
        }
    }

protected:
    /**
     * Defines properties for storing the ClientIds of clients / proxies that have
     * subscribed to the selective broadcasts
     */
    std::recursive_mutex steeringMutex_;
    std::recursive_mutex throttleMutex_;

};

/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for LaneAssistance.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class LaneAssistanceStubRemoteEvent
{
public:
    virtual ~LaneAssistanceStubRemoteEvent() { }

};

/**
 * Defines the interface that must be implemented by any class that should provide
 * the service LaneAssistance to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class LaneAssistanceStub
    : public virtual CommonAPI::Stub<LaneAssistanceStubAdapter, LaneAssistanceStubRemoteEvent>
{
public:

    virtual ~LaneAssistanceStub() {}
    void lockInterfaceVersionAttribute(bool _lockAccess) { static_cast<void>(_lockAccess); }
    bool hasElement(const uint32_t _id) const {
        return (_id < 2);
    }
    virtual const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client) = 0;

    /// Provides getter access to the attribute steering
    virtual const std::string &getSteeringAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireSteeringAttributeChanged(std::string _value) {
    auto stubAdapter = CommonAPI::Stub<LaneAssistanceStubAdapter, LaneAssistanceStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireSteeringAttributeChanged(_value);
    }
    void lockSteeringAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<LaneAssistanceStubAdapter, LaneAssistanceStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockSteeringAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute throttle
    virtual const std::string &getThrottleAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireThrottleAttributeChanged(std::string _value) {
    auto stubAdapter = CommonAPI::Stub<LaneAssistanceStubAdapter, LaneAssistanceStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireThrottleAttributeChanged(_value);
    }
    void lockThrottleAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<LaneAssistanceStubAdapter, LaneAssistanceStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockThrottleAttribute(_lockAccess);
    }


    using CommonAPI::Stub<LaneAssistanceStubAdapter, LaneAssistanceStubRemoteEvent>::initStubAdapter;
    typedef CommonAPI::Stub<LaneAssistanceStubAdapter, LaneAssistanceStubRemoteEvent>::StubAdapterType StubAdapterType;
    typedef CommonAPI::Stub<LaneAssistanceStubAdapter, LaneAssistanceStubRemoteEvent>::RemoteEventHandlerType RemoteEventHandlerType;
    typedef LaneAssistanceStubRemoteEvent RemoteEventType;
    typedef ::v0::commonapi::LaneAssistance StubInterface;
};

} // namespace commonapi
} // namespace v0


// Compatibility
namespace v0_1 = v0;

#endif // V0_COMMONAPI_Lane_Assistance_STUB_HPP_
